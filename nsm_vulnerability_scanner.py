# THIS WILL HOLD THE LOGIC FOR NETVULN 2.0 // THIS WILL HOLD THE LOGIC FOR THE NMAP VULN SCAN AND POSSIBLY OPEN VAS TO


# UI IMPORTS
import dns.exception
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.console import Console
import pyfiglet


# NETWORK IMPORTS
import socket, ipaddress, dns.resolver, nmap


# ETC IMPORTS
import threading, time, random, requests, subprocess, os
from concurrent.futures import ThreadPoolExecutor



# NSM IMPORTS
from nsm_utilities import Utilities, File_Handler, NetTilities
from nsm_directory_scanner import Requests_Directory_Scanner



# CONSTANTS & GLOBALS
console = Console()
terminal_width = console.size.width


# FILE HANDLING
from pathlib import Path
import json


    # BASE DIR
base_dir = Path.home() / "Documents" / "NSM Tools" / ".data" / "NetVuln 2.0"
base_dir.mkdir(parents=True, exist_ok=True)





class Nmap_Vulnerability_Scanner():
    """This class will be responsble for performing vuln scans and also network scans using purely nmap"""


    def __init__(self):
        pass

    

    @staticmethod
    def nmap_vuln_scanner(target:str, ports:list=[20,21,22,23,25,53,110,143,80,443,3389], script="vuln"):
        """This will be used to past vuln scripts to nmap to then run against the target ip"""


        
        ports = ','.join(str(ports))
        console.print(ports)
        cmd = f"nmap -p {ports} -sT --script {script} {target}"
        subprocess.run(cmd)






# STRICTLY FOR MODULER TESTING ONLY
if __name__ == "__main__":

    use = 1

    if use == 1:
        target = socket.gethostbyname("google.com")
        Nmap_Vulnerability_Scanner.nmap_vuln_scanner(target=target) 