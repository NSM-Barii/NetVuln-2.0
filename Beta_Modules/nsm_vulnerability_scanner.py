# THIS WILL HOLD THE LOGIC FOR NETVULN 2.0 // THIS WILL HOLD THE LOGIC FOR THE NMAP VULN SCAN AND POSSIBLY OPEN VAS TO


# UI IMPORTS
import dns.exception
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.console import Console
import pyfiglet


# NETWORK IMPORTS
import socket, ipaddress, dns.resolver, nmap


# ETC IMPORTS
import threading, time, random, requests, subprocess, os
from concurrent.futures import ThreadPoolExecutor


# NSM IMPORTS
#from nsm_settings import File_Saving



# CONSTANTS & GLOBALS
console = Console()
terminal_width = console.size.width


# FILE HANDLING
from pathlib import Path
import json


    # BASE DIR
base_dir = Path.home() / "Documents" / "NSM Tools" / ".data" / "NetVuln 2.0"
base_dir.mkdir(parents=True, exist_ok=True)





class Nmap_Vulnerability_Scanner():
    """This class will be responsble for performing vuln scans and also network scans using purely nmap"""


    # CLASS VARS
    scan_going = True


    def __init__(self):
        pass


    
    @classmethod
    def scan_checker(cls):
        """This method is strictly used to act as a background thread to tap the main terminal to get a status check for nmap scan"""

        
        # SET VARIABLES
        delay = 30
        type = 1
        time_start = time.time()
        cls.scan_going = True
        console.print("\n\nNSM VULN SCANNER SAYS: I HAVE RISEN", style="bold red")
        time.sleep(delay)


        # LOOP IT
        while cls.scan_going:

            
            # TAP SYSTEM
            time_current = time.time() - time_start
            
            if type == 1:
                os.system(f"echo UR MASTER IS STILL HERE")
                type = 2

            elif type == 2:
                os.system(f"echo Elapsed Scan time: {time_current:.2f}")
                
                if delay < 60:
                    delay += 5


            # NOW WAIT
            time.sleep(delay)


    

    @classmethod
    def nmap_vuln_scanner(cls, target:str, ports:list=["20","21","22","23","25","53","110","143","80","443","3389"], script="vuln"):
        """This will be used to past vuln scripts to nmap to then run against the target ip"""



        # NSM IMPORTS
        from nsm_settings import File_Saving


        # ERRORS 
        verbose = False
       
        
        # LIST OF VULNERABILITY SCRIPTS
        scripts_alpha = [
            #"http-slowloris",
            #"vulners",
            "http-vuln*",
            "smb-vuln*",
            "ftp-vsftpd-backdoor",
            "ssl-heartbleed",
            "ssl-ccs-injection",
            "ssl-poodle",
            "vuln"
        ]

        scripts_beta = [
            "vuln",
            "vulners",
            "http-*",
            "smb-*",
            "ftp-*",
            "ssl-*",
            "http-title",
            "banner"
        ]


        scripts_charlie = [
            "vuln",
            "vulners",
            "http-vuln-cve2017-5638",
            "http-vuln-cve2021-41773",
            "http-vuln-cve2006-3392",
            "http-shellshock",
            "http-dombased-xss",
            "http-slowloris",
            "http-iis-short-name-brute",
            "http-enum",
            "http-php-version",
            "http-title",
            "http-security-headers",
            "smb-vuln-ms17-010",
            "smb-vuln-ms08-067",
            "smb-check-vulns",
            "rdp-vuln-ms12-020",
            "ftp-anon",
            "ftp-vsftpd-backdoor",
            "ftp-proftpd-backdoor",
            "dns-zone-transfer",
            "snmp-info",
            "telnet-ntlm-info",
            "ssl-heartbleed",
            "ssl-poodle",
            "ssl-ccs-injection",
            "ssl-cert"
        ]

        

        # CREATE SCAN VARIABLES
        scan = "-sV"
        ports = ','.join(ports)
        scan_results_json = {}
        scan_results_text = []


        # SCAN CHECKER
        threading.Thread(target=Nmap_Vulnerability_Scanner.scan_checker, daemon=True).start()

        # ITERATE THROUGH VULN SCANS
        for script in scripts_alpha:


            console.print(f"\n\nRunning: {script}")
            cmd = f"nmap -p {ports} {scan} --script {script} {target}"
            result = subprocess.run(cmd, capture_output=True, text=True) # stdout="PIPE"
            cls.scan_going = False


            # REAL SAVE DATA
            result_json = {
                "target": target,
                "nse": script,
                "results": result.stdout
            }

            result_text = [
                f"target: {target}",
                f"nse: {script}",
                f"results: {result.stdout}"
            ]

             

            # SAVE SCAN RESULTS
            scan_results_json[script] = result_json
            scan_results_text.append(result_text)
            scan = "-sT"

            # TABLE FOR OUTPUT DATA
            table = Table(title=f"Nmap --> {script}", title_style="bold red", style="bold purple")
            table.add_column("Key", style="bold blue")
            table.add_column("Value", style="bold green")


            for key, val in result_json.items():
                table.add_row(f"{key}", f"{val}")
                if key == "nse":
                    table.add_section()
            
            console.print(table)
            

            # GIVE THE SCAN SOME BREATHING ROOM 
            time.sleep(2)
        
        # FINAL RESULTS
        if verbose:
            console.print("scann donee")
            console.print(scan_results_json)
            console.print(scan_results_text)

    

        # NOW TO SAVE RESULTS
        results = [scan_results_json, scan_results_text]
        File_Saving.push_info(save_data=results, save_type="8")



        # RETURN RESULTS FOR AI
        return [scan_results_json, scan_results_text]






# STRICTLY FOR MODULER TESTING ONLY
if __name__ == "__main__":

    use = 1

    if use == 1:
        target = socket.gethostbyname("nsmbarii.com")
        Nmap_Vulnerability_Scanner.nmap_vuln_scanner(target="nsmbarii.com") 