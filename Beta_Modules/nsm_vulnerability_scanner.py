# THIS WILL HOLD THE LOGIC FOR NETVULN 2.0 // THIS WILL HOLD THE LOGIC FOR THE NMAP VULN SCAN AND POSSIBLY OPEN VAS TO


# UI IMPORTS
import dns.exception
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.console import Console
import pyfiglet


# NETWORK IMPORTS
import socket, ipaddress, dns.resolver, nmap


# ETC IMPORTS
import threading, time, random, requests, subprocess, os
from concurrent.futures import ThreadPoolExecutor


# NSM IMPORTS
from nsm_utilities import Utilities, File_Handler, NetTilities
from nsm_directory_scanner import Requests_Directory_Scanner
from nsm_settings import File_Saving



# CONSTANTS & GLOBALS
console = Console()
terminal_width = console.size.width


# FILE HANDLING
from pathlib import Path
import json


    # BASE DIR
base_dir = Path.home() / "Documents" / "NSM Tools" / ".data" / "NetVuln 2.0"
base_dir.mkdir(parents=True, exist_ok=True)





class Nmap_Vulnerability_Scanner():
    """This class will be responsble for performing vuln scans and also network scans using purely nmap"""


    def __init__(self):
        pass

    

    @staticmethod
    def nmap_vuln_scanner(target:str, ports:list=["20","21","22","23","25","53","110","143","80","443","3389"], script="vuln"):
        """This will be used to past vuln scripts to nmap to then run against the target ip"""


        # ERRORS 
        verbose = True
       
        
        # LIST OF VULNERABILITY SCRIPTS
        scripts = [
            "vulners",
            "http-vuln*",
            "smb-vuln*",
            "ftp-vsftpd-backdoor",
            "ssl-heartbleed",
            "ssl-ccs-injection",
            "ssl-poodle",
           # "vuln"

        ]
        

        # CREATE SCAN VARIABLES
        scan = "-sT"
        ports = ','.join(ports)
        scan_results_json = {}
        scan_results_text = []
        

        # ITERATE THROUGH VULN SCANS
        for script in scripts:

            console.print(f"\n\nRunning: {script}")
            cmd = f"nmap -p {ports} {scan} --script {script} {target}"
            result = subprocess.run(cmd, capture_output=True) # stdout="PIPE"
            result=  str(result)
            console.print(result)

            # SAVE SCAN RESULTS
            scan_results_json[script] = result
            scan_results_text.append(result)
            scan = ""


            if verbose:
                console.print(scan)

        
        # FINAL RESULTS
        if verbose:
            console.print("scann donee")
            console.print(scan_results_json)
            console.print(scan_results_text)

    

        # NOW TO SAVE RESULTS
        results = [scan_results_json, scan_results_text]
        File_Saving.push_info(save_data=results, save_type="7")






# STRICTLY FOR MODULER TESTING ONLY
if __name__ == "__main__":

    use = 1

    if use == 1:
        target = socket.gethostbyname("nsmbarii.com")
        Nmap_Vulnerability_Scanner.nmap_vuln_scanner(target=target) 